/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import comparators.DueDateComparator;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.IModel;
import model.Book;
import model.Member;

/**
 *
 * @author Gitta Szabo
 */
public class LoanDialog extends javax.swing.JDialog {

    private java.awt.Frame parent;
    private IModel model;
    private List<Member> members;
    private List<Book> books;
    private Map<Integer, Member> memberMap;
    private Map<Integer, Book> bookMap;
    private Member selectedMember;
    private Book selectedBook;
    public static SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

    public LoanDialog(java.awt.Frame parent, boolean modal, IModel model) {
        super(parent, modal);
        initComponents();

        this.parent = parent;
        this.model = model;
        sdf.setLenient(false);

        setTitle("Loans of books");
        setLocationRelativeTo(parent);

        try {
            members = model.getAllMember();
            memberMap = model.memberMap();
            cbMembers.setModel(new DefaultComboBoxModel(members.toArray()));
            bookMap = model.bookMap();
            btnAllActionPerformed(null);
            tblBooks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(parent, ex, "Database error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbMembers = new javax.swing.JComboBox();
        btnAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBooks = new javax.swing.JTable();
        btnClose = new javax.swing.JButton();
        btnLoan = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        btnRenew = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cbMembers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMembersActionPerformed(evt);
            }
        });

        btnAll.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btnAll.setText("List All");
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        tblBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Author", "Title", "Status", "Due date", "Expired"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBooks.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBooks.getColumnModel().getColumn(0).setPreferredWidth(60);
        tblBooks.getColumnModel().getColumn(1).setPreferredWidth(150);
        tblBooks.getColumnModel().getColumn(2).setPreferredWidth(300);
        tblBooks.getColumnModel().getColumn(3).setPreferredWidth(155);
        tblBooks.getColumnModel().getColumn(4).setPreferredWidth(100);
        tblBooks.getColumnModel().getColumn(5).setPreferredWidth(60);
        jScrollPane1.setViewportView(tblBooks);

        btnClose.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnLoan.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btnLoan.setText("Loan");
        btnLoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoanActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel1.setText("Filter books by status");

        btnReturn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnRenew.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btnRenew.setText("Renew");
        btnRenew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenewActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel2.setText("Search books:");

        tfSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)
                        .addComponent(tfSearch))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClose)
                    .addComponent(btnLoan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRenew, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAll))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAll, btnClose, btnLoan, btnRenew, btnReturn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMembers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAll)
                    .addComponent(jLabel2)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLoan)
                        .addGap(12, 12, 12)
                        .addComponent(btnReturn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRenew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        //list all books
        cbMembers.setSelectedIndex(-1);
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(tblBooks.getModel());
        rowSorter.setComparator(4, new DueDateComparator());
        tblBooks.setRowSorter(rowSorter);
        tblBooks.getRowSorter().toggleSortOrder(1);
        try {
            books = model.getAllBook();
            refreshTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(parent, ex, "Database error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAllActionPerformed

    private void cbMembersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMembersActionPerformed
        //list books loaned to selected member
        selectedMember = (Member) cbMembers.getSelectedItem();
        if (selectedMember != null) {
            try {
                books = model.getAllBook(selectedMember);
                refreshTable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(parent, ex, "Database error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cbMembersActionPerformed

    private void btnLoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoanActionPerformed
        //change book status
        if (tblBooks.getSelectedRow() >= 0) {
            int selectedBookId = (int) tblBooks.getValueAt(tblBooks.getSelectedRow(), 0);
            selectedBook = bookMap.get(selectedBookId);
            if (selectedBook.getMemberId() == 0) {
                StatusDialog sd = new StatusDialog(parent, true, model, selectedBook);
                sd.setVisible(true);
                if (sd.isSave()) {
                    try {
                        model.updateBook(selectedBook);
                        books = model.getAllBook();
                        refreshTable();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(parent, ex, "Database error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "This book is currently unavailable",
                        "Unavailable book", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Select a book!",
                    "Nothing is selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoanActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        //return a book
        if (tblBooks.getSelectedRow() >= 0) {
            int selectedBookId = (int) tblBooks.getValueAt(tblBooks.getSelectedRow(), 0);
            selectedBook = bookMap.get(selectedBookId);
            if (selectedBook.getMemberId() != 0) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Do you want to return this book?",
                        "Confirm return", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) {
                    selectedBook.setMemberId(0);
                    selectedBook.setDate(null);
                    try {
                        model.updateBook(selectedBook);
                        if (cbMembers.getSelectedIndex() >= 0) {
                            selectedMember = (Member) cbMembers.getSelectedItem();
                            books = model.getAllBook(selectedMember);
                        } else {
                            books = model.getAllBook();
                        }
                        refreshTable();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(parent, ex, "Database error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "This book is currently available!",
                        "Available book", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Select a book!",
                    "Nothing is selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnRenewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenewActionPerformed
        ///renew loan
        if (tblBooks.getSelectedRow() >= 0) {
            int selectedBookId = (int) tblBooks.getValueAt(tblBooks.getSelectedRow(), 0);
            selectedBook = bookMap.get(selectedBookId);
            if (selectedBook.getMemberId() != 0) {
                RenewDialog rd = new RenewDialog(parent, true, selectedBook);
                rd.setVisible(true);

                if (rd.isSave()) {
                    try {
                        model.updateBook(selectedBook);
                        if (cbMembers.getSelectedIndex() >= 0) {
                            selectedMember = (Member) cbMembers.getSelectedItem();
                            books = model.getAllBook(selectedMember);
                        } else {
                            books = model.getAllBook();
                        }
                        refreshTable();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(parent, ex, "Database error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "This book is currently available",
                        "Invalid request", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Select a book!",
                    "Nothing is selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRenewActionPerformed

    private void tfSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchActionPerformed
        String text = tfSearch.getText();
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(tblBooks.getModel());
        if (text.trim().length() == 0) {
            rowSorter.setRowFilter(null);
        } else {
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
        tblBooks.setRowSorter(rowSorter);
    }//GEN-LAST:event_tfSearchActionPerformed

    public void refreshTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblBooks.getModel();
        dtm.getDataVector().clear();
        dtm.fireTableDataChanged();

        for (Book b : books) {
            Vector row = new Vector();
            row.add(b.getId());
            row.add(b.getAuthor());
            row.add(b.getTitle());
            Member m = memberMap.get(b.getMemberId());
            row.add(m.getName());
            if (b.getDate() != null) {
                row.add(sdf.format(b.getDate()));
            } else {
                row.add("");
            }
            row.add(isExpired(b));
            dtm.addRow(row);
        }
    }

    public static boolean isExpired(Book b) {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        Date currentDate = cal.getTime();
        if (b.getDate() != null) {
            return b.getDate().before(currentDate);
        } else {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnLoan;
    private javax.swing.JButton btnRenew;
    private javax.swing.JButton btnReturn;
    private javax.swing.JComboBox cbMembers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBooks;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

}
